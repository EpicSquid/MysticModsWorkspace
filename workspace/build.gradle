buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

repositories {
    maven { // TOP
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
    maven { // JEI
        url "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        name = "JER"
        url = "https://dl.bintray.com/way2muchnoise/dev"
    }
    flatDir {
        dir 'libs'
    }
}

version = '1.0'
group = 'com.yourname.modid' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'modid'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: "${mcp_mappings}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
//    accessTransformer = file('accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            // property 'forge.logging.console.level', 'debug'

            mods {
                MysticalLib {
                    source project(':MysticalLib').sourceSets.main
                }
                MysticalWorld {
                    source project(':MysticalWorld').sourceSets.main
                }
                Embers {
                    source project(':Embers').sourceSets.main
                }
                Traverse {
                    source project(':Traverse').sourceSets.main
                }
                Firefly {
                    source project(':Firefly').sourceSets.main
                }
                Glimmering {
                    source project(':Glimmering').sourceSets.main
                }
                dwmh {
                    source project(':dwmh').sourceSets.main
                }
                /*ArcaneArchives {
                    source project(':ArcaneArchives').sourceSets.main
                }*/
                GadgetryCore {
                    source project(':GadgetryCore').sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            // property 'forge.logging.console.level', 'debug'

            mods {
                MysticalLib {
                    source project(':MysticalLib').sourceSets.main
                }
                MysticalWorld {
                    source project(':MysticalWorld').sourceSets.main
                }
                Embers {
                    source project(':Embers').sourceSets.main
                }
                Traverse {
                    source project(':Traverse').sourceSets.main
                }
                Firefly {
                    source project(':Firefly').sourceSets.main
                }
                Glimmering {
                    source project(':Glimmering').sourceSets.main
                }
                dwmh {
                    source project(':dwmh').sourceSets.main
                }
                /*ArcaneArchives {
                    source project(':ArcaneArchives').sourceSets.main
                }*/
                GadgetryCore {
                    source project(':GadgetryCore').sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            environment 'target', 'fmluserdevdata'

            // Recommended logging data for a userdev environment
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

//            args '--mod', 'mysticalworld', '--all', '--output', project(':MysticalWorld').file('src/generated/resources/'), '--existing', project(':MysticalWorld').sourceSets.main.resources.srcDirs[0], '--existing', project(':MysticalWorld').sourceSets.main.resources.srcDirs[1]
            args '--mod', 'gadgetrycore', '--all', '--output', project(':GadgetryCore').file('src/generated/resources/'), '--existing', project(':GadgetryCore').sourceSets.main.resources.srcDirs[0], '--existing', project(':GadgetryCore').sourceSets.main.resources.srcDirs[1]

            mods {
                MysticalLib {
                    source project(':MysticalLib').sourceSets.main
                }
                MysticalWorld {
                    source project(':MysticalWorld').sourceSets.main
                }
                Embers {
                    source project(':Embers').sourceSets.main
                }
                Traverse {
                    source project(':Traverse').sourceSets.main
                }
                Firefly {
                    source project(':Firefly').sourceSets.main
                }
                Glimmering {
                    source project(':Glimmering').sourceSets.main
                }
                dwmh {
                    source project(':dwmh').sourceSets.main
                }
                /*ArcaneArchives {
                    source project(':ArcaneArchives').sourceSets.main
                }*/
                GadgetryCore {
                    source project(':GadgetryCore').sourceSets.main
                }
            }
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

//    compileOnly fg.deobf("mezz.jei:jei-${jei_version}:api")
//    runtimeOnly fg.deobf("mezz.jei:jei-${jei_version}")

    compileOnly fg.deobf("mezz.jei:jei-1.14.4:6.0.0.24:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.14.4:6.0.0.24")
    compileOnly("jeresources:JustEnoughResources-1.14.4:0.10.0.66")

    compile project(':MysticalLib')
    compile project(':MysticalWorld')
    compile project(':Embers')
    compile project(':Traverse')
    compile project(':Firefly')
    compile project(':Glimmering')
    compile project(':dwmh')
    //compile project(':ArcaneArchives')
    compile project(':GadgetryCore')

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "examplemod",
            "Specification-Vendor": "examplemodsareus",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"examplemodsareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
