buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

repositories {
    maven { // TOP
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
    maven { // JEI
        url "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        name = "JER"
        url = "https://dl.bintray.com/way2muchnoise/dev"
    }
    maven {
        name = "Jared"
        url = "https://maven.blamejared.com"
    }
    flatDir {
        dir 'libs'
    }
}

version = '1.0'
group = 'mysticmods.workspace' 
archivesBaseName = 'workspace'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: 'snapshot', version: "${mcp_mappings}"

    accessTransformer = file('accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.console.level', 'debug'
            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'

            mods {
                MysticalLib {
                    source project(':MysticalLib').sourceSets.main
                }
                MysticalWorld {
                    source project(':MysticalWorld').sourceSets.main
                }
                MysticalMachinery {
                    source project(':MysticalMachinery').sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.console.level', 'debug'

            mods {
                MysticalLib {
                    source project(':MysticalLib').sourceSets.main
                }
                MysticalWorld {
                    source project(':MysticalWorld').sourceSets.main
                }
                MysticalMachinery {
                    source project(':MysticalMachinery').sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            environment 'target', 'fmluserdevdata'

            property 'forge.logging.console.level', 'debug'

            // TODO: Fix this somehow?
            // ----------------------------------------------
            // For data generation, you'll have to comment in/out each block, reimport
            // gradle and then re-run genIntelliJ runs. Then run your data generator.
            // Then weep. And make sure you use the workspace classpath.

            //args '--mod', 'mysticalworld', '--all', '--output', project(':MysticalWorld').file('src/generated/resources/'), '--existing', project(':MysticalWorld').sourceSets.main.resources.srcDirs[0], '--existing', project(':MysticalLib').sourceSets.main.resources.srcDirs[0], '--existing', project(':MysticalWorld').sourceSets.main.resources.srcDirs[1]

            args '--mod', 'mysticalmachinery', '--all', '--output', project(':MysticalMachinery').file('src/generated/resources/'), '--existing', project(':MysticalMachinery').sourceSets.main.resources.srcDirs[0], '--existing', project(':MysticalLib').sourceSets.main.resources.srcDirs[0], '--existing', project(':MysticalMachinery').sourceSets.main.resources.srcDirs[1]

            mods {
                MysticalLib {
                    source project(':MysticalLib').sourceSets.main
                }
                MysticalWorld {
                    source project(':MysticalWorld').sourceSets.main
                }
                MysticalMachinery {
                    source project(':MysticalMachinery').sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    runtimeOnly fg.deobf("mezz.jei:jei-${jei_version}")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

    compile project(':MysticalLib')
    compile project(':MysticalWorld')
    compile project(':MysticalMachinery')
}
